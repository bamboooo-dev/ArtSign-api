// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateCategoryInput represents a mutation input for creating categories.
type CreateCategoryInput struct {
	Name    string
	WorkIDs []int
}

// Mutate applies the CreateCategoryInput on the CategoryCreate builder.
func (i *CreateCategoryInput) Mutate(m *CategoryCreate) {
	m.SetName(i.Name)
	if ids := i.WorkIDs; len(ids) > 0 {
		m.AddWorkIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateCategoryInput on the create builder.
func (c *CategoryCreate) SetInput(i CreateCategoryInput) *CategoryCreate {
	i.Mutate(c)
	return c
}

// UpdateCategoryInput represents a mutation input for updating categories.
type UpdateCategoryInput struct {
	Name          *string
	AddWorkIDs    []int
	RemoveWorkIDs []int
}

// Mutate applies the UpdateCategoryInput on the CategoryMutation.
func (i *UpdateCategoryInput) Mutate(m *CategoryMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if ids := i.AddWorkIDs; len(ids) > 0 {
		m.AddWorkIDs(ids...)
	}
	if ids := i.RemoveWorkIDs; len(ids) > 0 {
		m.RemoveWorkIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateCategoryInput on the update builder.
func (u *CategoryUpdate) SetInput(i UpdateCategoryInput) *CategoryUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateCategoryInput on the update-one builder.
func (u *CategoryUpdateOne) SetInput(i UpdateCategoryInput) *CategoryUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateCommentInput represents a mutation input for creating comments.
type CreateCommentInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Content    string
	OwnerID    int
	WorkID     int
	ChildIDs   []int
	ParentID   *int
	LikerIDs   []int
}

// Mutate applies the CreateCommentInput on the CommentCreate builder.
func (i *CreateCommentInput) Mutate(m *CommentCreate) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetContent(i.Content)
	m.SetOwnerID(i.OwnerID)
	m.SetWorkID(i.WorkID)
	if ids := i.ChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.LikerIDs; len(ids) > 0 {
		m.AddLikerIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateCommentInput on the create builder.
func (c *CommentCreate) SetInput(i CreateCommentInput) *CommentCreate {
	i.Mutate(c)
	return c
}

// UpdateCommentInput represents a mutation input for updating comments.
type UpdateCommentInput struct {
	Content        *string
	OwnerID        *int
	ClearOwner     bool
	WorkID         *int
	ClearWork      bool
	AddChildIDs    []int
	RemoveChildIDs []int
	ParentID       *int
	ClearParent    bool
	AddLikerIDs    []int
	RemoveLikerIDs []int
}

// Mutate applies the UpdateCommentInput on the CommentMutation.
func (i *UpdateCommentInput) Mutate(m *CommentMutation) {
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearWork {
		m.ClearWork()
	}
	if v := i.WorkID; v != nil {
		m.SetWorkID(*v)
	}
	if ids := i.AddChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
	if ids := i.RemoveChildIDs; len(ids) > 0 {
		m.RemoveChildIDs(ids...)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if ids := i.AddLikerIDs; len(ids) > 0 {
		m.AddLikerIDs(ids...)
	}
	if ids := i.RemoveLikerIDs; len(ids) > 0 {
		m.RemoveLikerIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateCommentInput on the update builder.
func (u *CommentUpdate) SetInput(i UpdateCommentInput) *CommentUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateCommentInput on the update-one builder.
func (u *CommentUpdateOne) SetInput(i UpdateCommentInput) *CommentUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateImageInput represents a mutation input for creating images.
type CreateImageInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	URL        string
	WorkID     int
}

// Mutate applies the CreateImageInput on the ImageCreate builder.
func (i *CreateImageInput) Mutate(m *ImageCreate) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetURL(i.URL)
	m.SetWorkID(i.WorkID)
}

// SetInput applies the change-set in the CreateImageInput on the create builder.
func (c *ImageCreate) SetInput(i CreateImageInput) *ImageCreate {
	i.Mutate(c)
	return c
}

// UpdateImageInput represents a mutation input for updating images.
type UpdateImageInput struct {
	URL       *string
	WorkID    *int
	ClearWork bool
}

// Mutate applies the UpdateImageInput on the ImageMutation.
func (i *UpdateImageInput) Mutate(m *ImageMutation) {
	if v := i.URL; v != nil {
		m.SetURL(*v)
	}
	if i.ClearWork {
		m.ClearWork()
	}
	if v := i.WorkID; v != nil {
		m.SetWorkID(*v)
	}
}

// SetInput applies the change-set in the UpdateImageInput on the update builder.
func (u *ImageUpdate) SetInput(i UpdateImageInput) *ImageUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateImageInput on the update-one builder.
func (u *ImageUpdateOne) SetInput(i UpdateImageInput) *ImageUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateToolInput represents a mutation input for creating tools.
type CreateToolInput struct {
	Name    string
	WorkIDs []int
}

// Mutate applies the CreateToolInput on the ToolCreate builder.
func (i *CreateToolInput) Mutate(m *ToolCreate) {
	m.SetName(i.Name)
	if ids := i.WorkIDs; len(ids) > 0 {
		m.AddWorkIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateToolInput on the create builder.
func (c *ToolCreate) SetInput(i CreateToolInput) *ToolCreate {
	i.Mutate(c)
	return c
}

// UpdateToolInput represents a mutation input for updating tools.
type UpdateToolInput struct {
	Name          *string
	AddWorkIDs    []int
	RemoveWorkIDs []int
}

// Mutate applies the UpdateToolInput on the ToolMutation.
func (i *UpdateToolInput) Mutate(m *ToolMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if ids := i.AddWorkIDs; len(ids) > 0 {
		m.AddWorkIDs(ids...)
	}
	if ids := i.RemoveWorkIDs; len(ids) > 0 {
		m.RemoveWorkIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateToolInput on the update builder.
func (u *ToolUpdate) SetInput(i UpdateToolInput) *ToolUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateToolInput on the update-one builder.
func (u *ToolUpdateOne) SetInput(i UpdateToolInput) *ToolUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateTreasureInput represents a mutation input for creating treasures.
type CreateTreasureInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	OwnerID    int
	WorkID     int
}

// Mutate applies the CreateTreasureInput on the TreasureCreate builder.
func (i *CreateTreasureInput) Mutate(m *TreasureCreate) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetOwnerID(i.OwnerID)
	m.SetWorkID(i.WorkID)
}

// SetInput applies the change-set in the CreateTreasureInput on the create builder.
func (c *TreasureCreate) SetInput(i CreateTreasureInput) *TreasureCreate {
	i.Mutate(c)
	return c
}

// UpdateTreasureInput represents a mutation input for updating treasures.
type UpdateTreasureInput struct {
	OwnerID    *int
	ClearOwner bool
	WorkID     *int
	ClearWork  bool
}

// Mutate applies the UpdateTreasureInput on the TreasureMutation.
func (i *UpdateTreasureInput) Mutate(m *TreasureMutation) {
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearWork {
		m.ClearWork()
	}
	if v := i.WorkID; v != nil {
		m.SetWorkID(*v)
	}
}

// SetInput applies the change-set in the UpdateTreasureInput on the update builder.
func (u *TreasureUpdate) SetInput(i UpdateTreasureInput) *TreasureUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTreasureInput on the update-one builder.
func (u *TreasureUpdateOne) SetInput(i UpdateTreasureInput) *TreasureUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name           string
	Username       string
	Profile        string
	AvatarURL      string
	WorkIDs        []int
	LikeIDs        []int
	TreasureIDs    []int
	CommentIDs     []int
	LikeCommentIDs []int
}

// Mutate applies the CreateUserInput on the UserCreate builder.
func (i *CreateUserInput) Mutate(m *UserCreate) {
	m.SetName(i.Name)
	m.SetUsername(i.Username)
	m.SetProfile(i.Profile)
	m.SetAvatarURL(i.AvatarURL)
	if ids := i.WorkIDs; len(ids) > 0 {
		m.AddWorkIDs(ids...)
	}
	if ids := i.LikeIDs; len(ids) > 0 {
		m.AddLikeIDs(ids...)
	}
	if ids := i.TreasureIDs; len(ids) > 0 {
		m.AddTreasureIDs(ids...)
	}
	if ids := i.CommentIDs; len(ids) > 0 {
		m.AddCommentIDs(ids...)
	}
	if ids := i.LikeCommentIDs; len(ids) > 0 {
		m.AddLikeCommentIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the create builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c)
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name                 *string
	Username             *string
	Profile              *string
	AvatarURL            *string
	AddWorkIDs           []int
	RemoveWorkIDs        []int
	AddLikeIDs           []int
	RemoveLikeIDs        []int
	AddTreasureIDs       []int
	RemoveTreasureIDs    []int
	AddCommentIDs        []int
	RemoveCommentIDs     []int
	AddLikeCommentIDs    []int
	RemoveLikeCommentIDs []int
}

// Mutate applies the UpdateUserInput on the UserMutation.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.Profile; v != nil {
		m.SetProfile(*v)
	}
	if v := i.AvatarURL; v != nil {
		m.SetAvatarURL(*v)
	}
	if ids := i.AddWorkIDs; len(ids) > 0 {
		m.AddWorkIDs(ids...)
	}
	if ids := i.RemoveWorkIDs; len(ids) > 0 {
		m.RemoveWorkIDs(ids...)
	}
	if ids := i.AddLikeIDs; len(ids) > 0 {
		m.AddLikeIDs(ids...)
	}
	if ids := i.RemoveLikeIDs; len(ids) > 0 {
		m.RemoveLikeIDs(ids...)
	}
	if ids := i.AddTreasureIDs; len(ids) > 0 {
		m.AddTreasureIDs(ids...)
	}
	if ids := i.RemoveTreasureIDs; len(ids) > 0 {
		m.RemoveTreasureIDs(ids...)
	}
	if ids := i.AddCommentIDs; len(ids) > 0 {
		m.AddCommentIDs(ids...)
	}
	if ids := i.RemoveCommentIDs; len(ids) > 0 {
		m.RemoveCommentIDs(ids...)
	}
	if ids := i.AddLikeCommentIDs; len(ids) > 0 {
		m.AddLikeCommentIDs(ids...)
	}
	if ids := i.RemoveLikeCommentIDs; len(ids) > 0 {
		m.RemoveLikeCommentIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the update builder.
func (u *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateUserInput on the update-one builder.
func (u *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateWorkInput represents a mutation input for creating works.
type CreateWorkInput struct {
	Title       string
	Description string
	Height      float64
	Width       float64
	SizeUnit    string
	Year        int
	Month       int
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	CategoryID  *int
	ToolIDs     []int
	OwnerID     *int
	LikerIDs    []int
	TreasureIDs []int
	CommentIDs  []int
	ImageIDs    []int
}

// Mutate applies the CreateWorkInput on the WorkCreate builder.
func (i *CreateWorkInput) Mutate(m *WorkCreate) {
	m.SetTitle(i.Title)
	m.SetDescription(i.Description)
	m.SetHeight(i.Height)
	m.SetWidth(i.Width)
	m.SetSizeUnit(i.SizeUnit)
	m.SetYear(i.Year)
	m.SetMonth(i.Month)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CategoryID; v != nil {
		m.SetCategoryID(*v)
	}
	if ids := i.ToolIDs; len(ids) > 0 {
		m.AddToolIDs(ids...)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if ids := i.LikerIDs; len(ids) > 0 {
		m.AddLikerIDs(ids...)
	}
	if ids := i.TreasureIDs; len(ids) > 0 {
		m.AddTreasureIDs(ids...)
	}
	if ids := i.CommentIDs; len(ids) > 0 {
		m.AddCommentIDs(ids...)
	}
	if ids := i.ImageIDs; len(ids) > 0 {
		m.AddImageIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateWorkInput on the create builder.
func (c *WorkCreate) SetInput(i CreateWorkInput) *WorkCreate {
	i.Mutate(c)
	return c
}

// UpdateWorkInput represents a mutation input for updating works.
type UpdateWorkInput struct {
	Title             *string
	Description       *string
	Height            *float64
	Width             *float64
	SizeUnit          *string
	Year              *int
	Month             *int
	UpdatedAt         *time.Time
	CategoryID        *int
	ClearCategory     bool
	AddToolIDs        []int
	RemoveToolIDs     []int
	OwnerID           *int
	ClearOwner        bool
	AddLikerIDs       []int
	RemoveLikerIDs    []int
	AddTreasureIDs    []int
	RemoveTreasureIDs []int
	AddCommentIDs     []int
	RemoveCommentIDs  []int
	AddImageIDs       []int
	RemoveImageIDs    []int
}

// Mutate applies the UpdateWorkInput on the WorkMutation.
func (i *UpdateWorkInput) Mutate(m *WorkMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Height; v != nil {
		m.SetHeight(*v)
	}
	if v := i.Width; v != nil {
		m.SetWidth(*v)
	}
	if v := i.SizeUnit; v != nil {
		m.SetSizeUnit(*v)
	}
	if v := i.Year; v != nil {
		m.SetYear(*v)
	}
	if v := i.Month; v != nil {
		m.SetMonth(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearCategory {
		m.ClearCategory()
	}
	if v := i.CategoryID; v != nil {
		m.SetCategoryID(*v)
	}
	if ids := i.AddToolIDs; len(ids) > 0 {
		m.AddToolIDs(ids...)
	}
	if ids := i.RemoveToolIDs; len(ids) > 0 {
		m.RemoveToolIDs(ids...)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if ids := i.AddLikerIDs; len(ids) > 0 {
		m.AddLikerIDs(ids...)
	}
	if ids := i.RemoveLikerIDs; len(ids) > 0 {
		m.RemoveLikerIDs(ids...)
	}
	if ids := i.AddTreasureIDs; len(ids) > 0 {
		m.AddTreasureIDs(ids...)
	}
	if ids := i.RemoveTreasureIDs; len(ids) > 0 {
		m.RemoveTreasureIDs(ids...)
	}
	if ids := i.AddCommentIDs; len(ids) > 0 {
		m.AddCommentIDs(ids...)
	}
	if ids := i.RemoveCommentIDs; len(ids) > 0 {
		m.RemoveCommentIDs(ids...)
	}
	if ids := i.AddImageIDs; len(ids) > 0 {
		m.AddImageIDs(ids...)
	}
	if ids := i.RemoveImageIDs; len(ids) > 0 {
		m.RemoveImageIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateWorkInput on the update builder.
func (u *WorkUpdate) SetInput(i UpdateWorkInput) *WorkUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateWorkInput on the update-one builder.
func (u *WorkUpdateOne) SetInput(i UpdateWorkInput) *WorkUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
