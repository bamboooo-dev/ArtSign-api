// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateCategoryInput represents a mutation input for creating categories.
type CreateCategoryInput struct {
	Name    string
	WorkIDs []int
}

// Mutate applies the CreateCategoryInput on the CategoryCreate builder.
func (i *CreateCategoryInput) Mutate(m *CategoryCreate) {
	m.SetName(i.Name)
	if ids := i.WorkIDs; len(ids) > 0 {
		m.AddWorkIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateCategoryInput on the create builder.
func (c *CategoryCreate) SetInput(i CreateCategoryInput) *CategoryCreate {
	i.Mutate(c)
	return c
}

// UpdateCategoryInput represents a mutation input for updating categories.
type UpdateCategoryInput struct {
	Name          *string
	AddWorkIDs    []int
	RemoveWorkIDs []int
}

// Mutate applies the UpdateCategoryInput on the CategoryMutation.
func (i *UpdateCategoryInput) Mutate(m *CategoryMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if ids := i.AddWorkIDs; len(ids) > 0 {
		m.AddWorkIDs(ids...)
	}
	if ids := i.RemoveWorkIDs; len(ids) > 0 {
		m.RemoveWorkIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateCategoryInput on the update builder.
func (u *CategoryUpdate) SetInput(i UpdateCategoryInput) *CategoryUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateCategoryInput on the update-one builder.
func (u *CategoryUpdateOne) SetInput(i UpdateCategoryInput) *CategoryUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateCommentInput represents a mutation input for creating comments.
type CreateCommentInput struct {
	CreateTime *time.Time
	UpdateTime *time.Time
	Content    string
	OwnerID    int
	WorkID     int
}

// Mutate applies the CreateCommentInput on the CommentCreate builder.
func (i *CreateCommentInput) Mutate(m *CommentCreate) {
	if v := i.CreateTime; v != nil {
		m.SetCreateTime(*v)
	}
	if v := i.UpdateTime; v != nil {
		m.SetUpdateTime(*v)
	}
	m.SetContent(i.Content)
	m.SetOwnerID(i.OwnerID)
	m.SetWorkID(i.WorkID)
}

// SetInput applies the change-set in the CreateCommentInput on the create builder.
func (c *CommentCreate) SetInput(i CreateCommentInput) *CommentCreate {
	i.Mutate(c)
	return c
}

// UpdateCommentInput represents a mutation input for updating comments.
type UpdateCommentInput struct {
	Content    *string
	OwnerID    *int
	ClearOwner bool
	WorkID     *int
	ClearWork  bool
}

// Mutate applies the UpdateCommentInput on the CommentMutation.
func (i *UpdateCommentInput) Mutate(m *CommentMutation) {
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearWork {
		m.ClearWork()
	}
	if v := i.WorkID; v != nil {
		m.SetWorkID(*v)
	}
}

// SetInput applies the change-set in the UpdateCommentInput on the update builder.
func (u *CommentUpdate) SetInput(i UpdateCommentInput) *CommentUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateCommentInput on the update-one builder.
func (u *CommentUpdateOne) SetInput(i UpdateCommentInput) *CommentUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name        string
	Profile     string
	WorkIDs     []int
	LikeIDs     []int
	TreasureIDs []int
	CommentIDs  []int
}

// Mutate applies the CreateUserInput on the UserCreate builder.
func (i *CreateUserInput) Mutate(m *UserCreate) {
	m.SetName(i.Name)
	m.SetProfile(i.Profile)
	if ids := i.WorkIDs; len(ids) > 0 {
		m.AddWorkIDs(ids...)
	}
	if ids := i.LikeIDs; len(ids) > 0 {
		m.AddLikeIDs(ids...)
	}
	if ids := i.TreasureIDs; len(ids) > 0 {
		m.AddTreasureIDs(ids...)
	}
	if ids := i.CommentIDs; len(ids) > 0 {
		m.AddCommentIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the create builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c)
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name              *string
	Profile           *string
	AddWorkIDs        []int
	RemoveWorkIDs     []int
	AddLikeIDs        []int
	RemoveLikeIDs     []int
	AddTreasureIDs    []int
	RemoveTreasureIDs []int
	AddCommentIDs     []int
	RemoveCommentIDs  []int
}

// Mutate applies the UpdateUserInput on the UserMutation.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Profile; v != nil {
		m.SetProfile(*v)
	}
	if ids := i.AddWorkIDs; len(ids) > 0 {
		m.AddWorkIDs(ids...)
	}
	if ids := i.RemoveWorkIDs; len(ids) > 0 {
		m.RemoveWorkIDs(ids...)
	}
	if ids := i.AddLikeIDs; len(ids) > 0 {
		m.AddLikeIDs(ids...)
	}
	if ids := i.RemoveLikeIDs; len(ids) > 0 {
		m.RemoveLikeIDs(ids...)
	}
	if ids := i.AddTreasureIDs; len(ids) > 0 {
		m.AddTreasureIDs(ids...)
	}
	if ids := i.RemoveTreasureIDs; len(ids) > 0 {
		m.RemoveTreasureIDs(ids...)
	}
	if ids := i.AddCommentIDs; len(ids) > 0 {
		m.AddCommentIDs(ids...)
	}
	if ids := i.RemoveCommentIDs; len(ids) > 0 {
		m.RemoveCommentIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the update builder.
func (u *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateUserInput on the update-one builder.
func (u *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateWorkInput represents a mutation input for creating works.
type CreateWorkInput struct {
	Title        string
	Description  string
	ImageURL     string
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	CategoryID   *int
	OwnerID      *int
	LikerIDs     []int
	TreasurerIDs []int
	CommentIDs   []int
}

// Mutate applies the CreateWorkInput on the WorkCreate builder.
func (i *CreateWorkInput) Mutate(m *WorkCreate) {
	m.SetTitle(i.Title)
	m.SetDescription(i.Description)
	m.SetImageURL(i.ImageURL)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CategoryID; v != nil {
		m.SetCategoryID(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if ids := i.LikerIDs; len(ids) > 0 {
		m.AddLikerIDs(ids...)
	}
	if ids := i.TreasurerIDs; len(ids) > 0 {
		m.AddTreasurerIDs(ids...)
	}
	if ids := i.CommentIDs; len(ids) > 0 {
		m.AddCommentIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateWorkInput on the create builder.
func (c *WorkCreate) SetInput(i CreateWorkInput) *WorkCreate {
	i.Mutate(c)
	return c
}

// UpdateWorkInput represents a mutation input for updating works.
type UpdateWorkInput struct {
	Title              *string
	Description        *string
	ImageURL           *string
	UpdatedAt          *time.Time
	CategoryID         *int
	ClearCategory      bool
	OwnerID            *int
	ClearOwner         bool
	AddLikerIDs        []int
	RemoveLikerIDs     []int
	AddTreasurerIDs    []int
	RemoveTreasurerIDs []int
	AddCommentIDs      []int
	RemoveCommentIDs   []int
}

// Mutate applies the UpdateWorkInput on the WorkMutation.
func (i *UpdateWorkInput) Mutate(m *WorkMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.ImageURL; v != nil {
		m.SetImageURL(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearCategory {
		m.ClearCategory()
	}
	if v := i.CategoryID; v != nil {
		m.SetCategoryID(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if ids := i.AddLikerIDs; len(ids) > 0 {
		m.AddLikerIDs(ids...)
	}
	if ids := i.RemoveLikerIDs; len(ids) > 0 {
		m.RemoveLikerIDs(ids...)
	}
	if ids := i.AddTreasurerIDs; len(ids) > 0 {
		m.AddTreasurerIDs(ids...)
	}
	if ids := i.RemoveTreasurerIDs; len(ids) > 0 {
		m.RemoveTreasurerIDs(ids...)
	}
	if ids := i.AddCommentIDs; len(ids) > 0 {
		m.AddCommentIDs(ids...)
	}
	if ids := i.RemoveCommentIDs; len(ids) > 0 {
		m.RemoveCommentIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateWorkInput on the update builder.
func (u *WorkUpdate) SetInput(i UpdateWorkInput) *WorkUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateWorkInput on the update-one builder.
func (u *WorkUpdateOne) SetInput(i UpdateWorkInput) *WorkUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
