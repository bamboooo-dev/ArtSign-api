// Code generated by entc, DO NOT EDIT.

package ent

import (
	"artsign/ent/work"
	"time"
)

// CreateWorkInput represents a mutation input for creating works.
type CreateWorkInput struct {
	Text      string
	CreatedAt *time.Time
	Status    *work.Status
	Priority  *int
	ChildIDs  []int
	ParentID  *int
}

// Mutate applies the CreateWorkInput on the WorkCreate builder.
func (i *CreateWorkInput) Mutate(m *WorkCreate) {
	m.SetText(i.Text)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if ids := i.ChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
}

// SetInput applies the change-set in the CreateWorkInput on the create builder.
func (c *WorkCreate) SetInput(i CreateWorkInput) *WorkCreate {
	i.Mutate(c)
	return c
}

// UpdateWorkInput represents a mutation input for updating works.
type UpdateWorkInput struct {
	Text           *string
	Status         *work.Status
	Priority       *int
	AddChildIDs    []int
	RemoveChildIDs []int
	ParentID       *int
	ClearParent    bool
}

// Mutate applies the UpdateWorkInput on the WorkMutation.
func (i *UpdateWorkInput) Mutate(m *WorkMutation) {
	if v := i.Text; v != nil {
		m.SetText(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if ids := i.AddChildIDs; len(ids) > 0 {
		m.AddChildIDs(ids...)
	}
	if ids := i.RemoveChildIDs; len(ids) > 0 {
		m.RemoveChildIDs(ids...)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
}

// SetInput applies the change-set in the UpdateWorkInput on the update builder.
func (u *WorkUpdate) SetInput(i UpdateWorkInput) *WorkUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateWorkInput on the update-one builder.
func (u *WorkUpdateOne) SetInput(i UpdateWorkInput) *WorkUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
