// Code generated by entc, DO NOT EDIT.

package ent

import (
	"artsign/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Profile holds the value of the "profile" field.
	Profile string `json:"profile,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	AvatarURL string `json:"avatar_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Works holds the value of the works edge.
	Works []*Work `json:"works,omitempty"`
	// Likes holds the value of the likes edge.
	Likes []*Work `json:"likes,omitempty"`
	// Treasures holds the value of the treasures edge.
	Treasures []*Work `json:"treasures,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// LikeComments holds the value of the like_comments edge.
	LikeComments []*Comment `json:"like_comments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// WorksOrErr returns the Works value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) WorksOrErr() ([]*Work, error) {
	if e.loadedTypes[0] {
		return e.Works, nil
	}
	return nil, &NotLoadedError{edge: "works"}
}

// LikesOrErr returns the Likes value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikesOrErr() ([]*Work, error) {
	if e.loadedTypes[1] {
		return e.Likes, nil
	}
	return nil, &NotLoadedError{edge: "likes"}
}

// TreasuresOrErr returns the Treasures value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) TreasuresOrErr() ([]*Work, error) {
	if e.loadedTypes[2] {
		return e.Treasures, nil
	}
	return nil, &NotLoadedError{edge: "treasures"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[3] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// LikeCommentsOrErr returns the LikeComments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikeCommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[4] {
		return e.LikeComments, nil
	}
	return nil, &NotLoadedError{edge: "like_comments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldUsername, user.FieldProfile, user.FieldAvatarURL:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldProfile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile", values[i])
			} else if value.Valid {
				u.Profile = value.String
			}
		case user.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				u.AvatarURL = value.String
			}
		}
	}
	return nil
}

// QueryWorks queries the "works" edge of the User entity.
func (u *User) QueryWorks() *WorkQuery {
	return (&UserClient{config: u.config}).QueryWorks(u)
}

// QueryLikes queries the "likes" edge of the User entity.
func (u *User) QueryLikes() *WorkQuery {
	return (&UserClient{config: u.config}).QueryLikes(u)
}

// QueryTreasures queries the "treasures" edge of the User entity.
func (u *User) QueryTreasures() *WorkQuery {
	return (&UserClient{config: u.config}).QueryTreasures(u)
}

// QueryComments queries the "comments" edge of the User entity.
func (u *User) QueryComments() *CommentQuery {
	return (&UserClient{config: u.config}).QueryComments(u)
}

// QueryLikeComments queries the "like_comments" edge of the User entity.
func (u *User) QueryLikeComments() *CommentQuery {
	return (&UserClient{config: u.config}).QueryLikeComments(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", profile=")
	builder.WriteString(u.Profile)
	builder.WriteString(", avatar_url=")
	builder.WriteString(u.AvatarURL)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
