// Code generated by entc, DO NOT EDIT.

package ent

import (
	"artsign/ent/treasure"
	"artsign/ent/user"
	"artsign/ent/work"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Treasure is the model entity for the Treasure schema.
type Treasure struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime time.Time `json:"update_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TreasureQuery when eager-loading is set.
	Edges          TreasureEdges `json:"edges"`
	user_treasures *int
	work_treasures *int
}

// TreasureEdges holds the relations/edges for other nodes in the graph.
type TreasureEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Work holds the value of the work edge.
	Work *Work `json:"work,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreasureEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// WorkOrErr returns the Work value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TreasureEdges) WorkOrErr() (*Work, error) {
	if e.loadedTypes[1] {
		if e.Work == nil {
			// The edge work was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: work.Label}
		}
		return e.Work, nil
	}
	return nil, &NotLoadedError{edge: "work"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Treasure) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case treasure.FieldID:
			values[i] = new(sql.NullInt64)
		case treasure.FieldCreateTime, treasure.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		case treasure.ForeignKeys[0]: // user_treasures
			values[i] = new(sql.NullInt64)
		case treasure.ForeignKeys[1]: // work_treasures
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Treasure", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Treasure fields.
func (t *Treasure) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case treasure.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case treasure.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				t.CreateTime = value.Time
			}
		case treasure.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				t.UpdateTime = value.Time
			}
		case treasure.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_treasures", value)
			} else if value.Valid {
				t.user_treasures = new(int)
				*t.user_treasures = int(value.Int64)
			}
		case treasure.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field work_treasures", value)
			} else if value.Valid {
				t.work_treasures = new(int)
				*t.work_treasures = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryOwner queries the "owner" edge of the Treasure entity.
func (t *Treasure) QueryOwner() *UserQuery {
	return (&TreasureClient{config: t.config}).QueryOwner(t)
}

// QueryWork queries the "work" edge of the Treasure entity.
func (t *Treasure) QueryWork() *WorkQuery {
	return (&TreasureClient{config: t.config}).QueryWork(t)
}

// Update returns a builder for updating this Treasure.
// Note that you need to call Treasure.Unwrap() before calling this method if this Treasure
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Treasure) Update() *TreasureUpdateOne {
	return (&TreasureClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Treasure entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Treasure) Unwrap() *Treasure {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Treasure is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Treasure) String() string {
	var builder strings.Builder
	builder.WriteString("Treasure(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", create_time=")
	builder.WriteString(t.CreateTime.Format(time.ANSIC))
	builder.WriteString(", update_time=")
	builder.WriteString(t.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Treasures is a parsable slice of Treasure.
type Treasures []*Treasure

func (t Treasures) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
