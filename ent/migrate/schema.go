// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CategoriesColumns holds the columns for the "categories" table.
	CategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// CategoriesTable holds the schema information for the "categories" table.
	CategoriesTable = &schema.Table{
		Name:       "categories",
		Columns:    CategoriesColumns,
		PrimaryKey: []*schema.Column{CategoriesColumns[0]},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "comment_parent", Type: field.TypeInt, Nullable: true},
		{Name: "user_comments", Type: field.TypeInt, Nullable: true},
		{Name: "work_comments", Type: field.TypeInt, Nullable: true},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_comments_parent",
				Columns:    []*schema.Column{CommentsColumns[4]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_users_comments",
				Columns:    []*schema.Column{CommentsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_works_comments",
				Columns:    []*schema.Column{CommentsColumns[6]},
				RefColumns: []*schema.Column{WorksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ImagesColumns holds the columns for the "images" table.
	ImagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "url", Type: field.TypeString},
		{Name: "work_images", Type: field.TypeInt, Nullable: true},
	}
	// ImagesTable holds the schema information for the "images" table.
	ImagesTable = &schema.Table{
		Name:       "images",
		Columns:    ImagesColumns,
		PrimaryKey: []*schema.Column{ImagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "images_works_images",
				Columns:    []*schema.Column{ImagesColumns[4]},
				RefColumns: []*schema.Column{WorksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PortfoliosColumns holds the columns for the "portfolios" table.
	PortfoliosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "user_portfolios", Type: field.TypeInt, Nullable: true},
		{Name: "work_portfolios", Type: field.TypeInt, Nullable: true},
	}
	// PortfoliosTable holds the schema information for the "portfolios" table.
	PortfoliosTable = &schema.Table{
		Name:       "portfolios",
		Columns:    PortfoliosColumns,
		PrimaryKey: []*schema.Column{PortfoliosColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "portfolios_users_portfolios",
				Columns:    []*schema.Column{PortfoliosColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "portfolios_works_portfolios",
				Columns:    []*schema.Column{PortfoliosColumns[4]},
				RefColumns: []*schema.Column{WorksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ToolsColumns holds the columns for the "tools" table.
	ToolsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// ToolsTable holds the schema information for the "tools" table.
	ToolsTable = &schema.Table{
		Name:       "tools",
		Columns:    ToolsColumns,
		PrimaryKey: []*schema.Column{ToolsColumns[0]},
	}
	// TreasuresColumns holds the columns for the "treasures" table.
	TreasuresColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "update_time", Type: field.TypeTime},
		{Name: "user_treasures", Type: field.TypeInt, Nullable: true},
		{Name: "work_treasures", Type: field.TypeInt, Nullable: true},
	}
	// TreasuresTable holds the schema information for the "treasures" table.
	TreasuresTable = &schema.Table{
		Name:       "treasures",
		Columns:    TreasuresColumns,
		PrimaryKey: []*schema.Column{TreasuresColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "treasures_users_treasures",
				Columns:    []*schema.Column{TreasuresColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "treasures_works_treasures",
				Columns:    []*schema.Column{TreasuresColumns[4]},
				RefColumns: []*schema.Column{WorksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "username", Type: field.TypeString},
		{Name: "profile", Type: field.TypeString, Size: 2147483647},
		{Name: "avatar_url", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// WorksColumns holds the columns for the "works" table.
	WorksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Size: 2147483647},
		{Name: "height", Type: field.TypeFloat64},
		{Name: "width", Type: field.TypeFloat64},
		{Name: "size_unit", Type: field.TypeString},
		{Name: "year", Type: field.TypeInt},
		{Name: "month", Type: field.TypeInt},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "category_works", Type: field.TypeInt, Nullable: true},
		{Name: "user_works", Type: field.TypeInt, Nullable: true},
	}
	// WorksTable holds the schema information for the "works" table.
	WorksTable = &schema.Table{
		Name:       "works",
		Columns:    WorksColumns,
		PrimaryKey: []*schema.Column{WorksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "works_categories_works",
				Columns:    []*schema.Column{WorksColumns[10]},
				RefColumns: []*schema.Column{CategoriesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "works_users_works",
				Columns:    []*schema.Column{WorksColumns[11]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ToolWorksColumns holds the columns for the "tool_works" table.
	ToolWorksColumns = []*schema.Column{
		{Name: "tool_id", Type: field.TypeInt},
		{Name: "work_id", Type: field.TypeInt},
	}
	// ToolWorksTable holds the schema information for the "tool_works" table.
	ToolWorksTable = &schema.Table{
		Name:       "tool_works",
		Columns:    ToolWorksColumns,
		PrimaryKey: []*schema.Column{ToolWorksColumns[0], ToolWorksColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tool_works_tool_id",
				Columns:    []*schema.Column{ToolWorksColumns[0]},
				RefColumns: []*schema.Column{ToolsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "tool_works_work_id",
				Columns:    []*schema.Column{ToolWorksColumns[1]},
				RefColumns: []*schema.Column{WorksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserLikesColumns holds the columns for the "user_likes" table.
	UserLikesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "work_id", Type: field.TypeInt},
	}
	// UserLikesTable holds the schema information for the "user_likes" table.
	UserLikesTable = &schema.Table{
		Name:       "user_likes",
		Columns:    UserLikesColumns,
		PrimaryKey: []*schema.Column{UserLikesColumns[0], UserLikesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_likes_user_id",
				Columns:    []*schema.Column{UserLikesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_likes_work_id",
				Columns:    []*schema.Column{UserLikesColumns[1]},
				RefColumns: []*schema.Column{WorksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserLikeCommentsColumns holds the columns for the "user_like_comments" table.
	UserLikeCommentsColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "comment_id", Type: field.TypeInt},
	}
	// UserLikeCommentsTable holds the schema information for the "user_like_comments" table.
	UserLikeCommentsTable = &schema.Table{
		Name:       "user_like_comments",
		Columns:    UserLikeCommentsColumns,
		PrimaryKey: []*schema.Column{UserLikeCommentsColumns[0], UserLikeCommentsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_like_comments_user_id",
				Columns:    []*schema.Column{UserLikeCommentsColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_like_comments_comment_id",
				Columns:    []*schema.Column{UserLikeCommentsColumns[1]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CategoriesTable,
		CommentsTable,
		ImagesTable,
		PortfoliosTable,
		ToolsTable,
		TreasuresTable,
		UsersTable,
		WorksTable,
		ToolWorksTable,
		UserLikesTable,
		UserLikeCommentsTable,
	}
)

func init() {
	CommentsTable.ForeignKeys[0].RefTable = CommentsTable
	CommentsTable.ForeignKeys[1].RefTable = UsersTable
	CommentsTable.ForeignKeys[2].RefTable = WorksTable
	ImagesTable.ForeignKeys[0].RefTable = WorksTable
	PortfoliosTable.ForeignKeys[0].RefTable = UsersTable
	PortfoliosTable.ForeignKeys[1].RefTable = WorksTable
	TreasuresTable.ForeignKeys[0].RefTable = UsersTable
	TreasuresTable.ForeignKeys[1].RefTable = WorksTable
	WorksTable.ForeignKeys[0].RefTable = CategoriesTable
	WorksTable.ForeignKeys[1].RefTable = UsersTable
	ToolWorksTable.ForeignKeys[0].RefTable = ToolsTable
	ToolWorksTable.ForeignKeys[1].RefTable = WorksTable
	UserLikesTable.ForeignKeys[0].RefTable = UsersTable
	UserLikesTable.ForeignKeys[1].RefTable = WorksTable
	UserLikeCommentsTable.ForeignKeys[0].RefTable = UsersTable
	UserLikeCommentsTable.ForeignKeys[1].RefTable = CommentsTable
}
