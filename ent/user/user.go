// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldProfile holds the string denoting the profile field in the database.
	FieldProfile = "profile"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// EdgeWorks holds the string denoting the works edge name in mutations.
	EdgeWorks = "works"
	// EdgeLikes holds the string denoting the likes edge name in mutations.
	EdgeLikes = "likes"
	// EdgeTreasures holds the string denoting the treasures edge name in mutations.
	EdgeTreasures = "treasures"
	// EdgePortfolios holds the string denoting the portfolios edge name in mutations.
	EdgePortfolios = "portfolios"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeLikeComments holds the string denoting the like_comments edge name in mutations.
	EdgeLikeComments = "like_comments"
	// Table holds the table name of the user in the database.
	Table = "users"
	// WorksTable is the table that holds the works relation/edge.
	WorksTable = "works"
	// WorksInverseTable is the table name for the Work entity.
	// It exists in this package in order to avoid circular dependency with the "work" package.
	WorksInverseTable = "works"
	// WorksColumn is the table column denoting the works relation/edge.
	WorksColumn = "user_works"
	// LikesTable is the table that holds the likes relation/edge. The primary key declared below.
	LikesTable = "user_likes"
	// LikesInverseTable is the table name for the Work entity.
	// It exists in this package in order to avoid circular dependency with the "work" package.
	LikesInverseTable = "works"
	// TreasuresTable is the table that holds the treasures relation/edge.
	TreasuresTable = "treasures"
	// TreasuresInverseTable is the table name for the Treasure entity.
	// It exists in this package in order to avoid circular dependency with the "treasure" package.
	TreasuresInverseTable = "treasures"
	// TreasuresColumn is the table column denoting the treasures relation/edge.
	TreasuresColumn = "user_treasures"
	// PortfoliosTable is the table that holds the portfolios relation/edge.
	PortfoliosTable = "portfolios"
	// PortfoliosInverseTable is the table name for the Portfolio entity.
	// It exists in this package in order to avoid circular dependency with the "portfolio" package.
	PortfoliosInverseTable = "portfolios"
	// PortfoliosColumn is the table column denoting the portfolios relation/edge.
	PortfoliosColumn = "user_portfolios"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "user_comments"
	// LikeCommentsTable is the table that holds the like_comments relation/edge. The primary key declared below.
	LikeCommentsTable = "user_like_comments"
	// LikeCommentsInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	LikeCommentsInverseTable = "comments"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldUsername,
	FieldProfile,
	FieldAvatarURL,
}

var (
	// LikesPrimaryKey and LikesColumn2 are the table columns denoting the
	// primary key for the likes relation (M2M).
	LikesPrimaryKey = []string{"user_id", "work_id"}
	// LikeCommentsPrimaryKey and LikeCommentsColumn2 are the table columns denoting the
	// primary key for the like_comments relation (M2M).
	LikeCommentsPrimaryKey = []string{"user_id", "comment_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
)
