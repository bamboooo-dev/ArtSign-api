// Code generated by entc, DO NOT EDIT.

package ent

import "context"

func (c *Category) Works(ctx context.Context) ([]*Work, error) {
	result, err := c.Edges.WorksOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryWorks().All(ctx)
	}
	return result, err
}

func (c *Comment) Owner(ctx context.Context) (*User, error) {
	result, err := c.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryOwner().Only(ctx)
	}
	return result, err
}

func (c *Comment) Work(ctx context.Context) (*Work, error) {
	result, err := c.Edges.WorkOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryWork().Only(ctx)
	}
	return result, err
}

func (c *Comment) Children(ctx context.Context) ([]*Comment, error) {
	result, err := c.Edges.ChildrenOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryChildren().All(ctx)
	}
	return result, err
}

func (c *Comment) Parent(ctx context.Context) (*Comment, error) {
	result, err := c.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (c *Comment) Likers(ctx context.Context) ([]*User, error) {
	result, err := c.Edges.LikersOrErr()
	if IsNotLoaded(err) {
		result, err = c.QueryLikers().All(ctx)
	}
	return result, err
}

func (i *Image) Work(ctx context.Context) (*Work, error) {
	result, err := i.Edges.WorkOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryWork().Only(ctx)
	}
	return result, err
}

func (po *Portfolio) Owner(ctx context.Context) (*User, error) {
	result, err := po.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryOwner().Only(ctx)
	}
	return result, err
}

func (po *Portfolio) Work(ctx context.Context) (*Work, error) {
	result, err := po.Edges.WorkOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryWork().Only(ctx)
	}
	return result, err
}

func (t *Tool) Works(ctx context.Context) ([]*Work, error) {
	result, err := t.Edges.WorksOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryWorks().All(ctx)
	}
	return result, err
}

func (t *Treasure) Owner(ctx context.Context) (*User, error) {
	result, err := t.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryOwner().Only(ctx)
	}
	return result, err
}

func (t *Treasure) Work(ctx context.Context) (*Work, error) {
	result, err := t.Edges.WorkOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryWork().Only(ctx)
	}
	return result, err
}

func (u *User) Works(ctx context.Context) ([]*Work, error) {
	result, err := u.Edges.WorksOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryWorks().All(ctx)
	}
	return result, err
}

func (u *User) Likes(ctx context.Context) ([]*Work, error) {
	result, err := u.Edges.LikesOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryLikes().All(ctx)
	}
	return result, err
}

func (u *User) Treasures(ctx context.Context) ([]*Treasure, error) {
	result, err := u.Edges.TreasuresOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryTreasures().All(ctx)
	}
	return result, err
}

func (u *User) Portfolios(ctx context.Context) ([]*Portfolio, error) {
	result, err := u.Edges.PortfoliosOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryPortfolios().All(ctx)
	}
	return result, err
}

func (u *User) Comments(ctx context.Context) ([]*Comment, error) {
	result, err := u.Edges.CommentsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryComments().All(ctx)
	}
	return result, err
}

func (u *User) LikeComments(ctx context.Context) ([]*Comment, error) {
	result, err := u.Edges.LikeCommentsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryLikeComments().All(ctx)
	}
	return result, err
}

func (w *Work) Category(ctx context.Context) (*Category, error) {
	result, err := w.Edges.CategoryOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryCategory().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Work) Tools(ctx context.Context) ([]*Tool, error) {
	result, err := w.Edges.ToolsOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryTools().All(ctx)
	}
	return result, err
}

func (w *Work) Owner(ctx context.Context) (*User, error) {
	result, err := w.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (w *Work) Likers(ctx context.Context) ([]*User, error) {
	result, err := w.Edges.LikersOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryLikers().All(ctx)
	}
	return result, err
}

func (w *Work) Treasures(ctx context.Context) ([]*Treasure, error) {
	result, err := w.Edges.TreasuresOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryTreasures().All(ctx)
	}
	return result, err
}

func (w *Work) Portfolios(ctx context.Context) ([]*Portfolio, error) {
	result, err := w.Edges.PortfoliosOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryPortfolios().All(ctx)
	}
	return result, err
}

func (w *Work) Comments(ctx context.Context) ([]*Comment, error) {
	result, err := w.Edges.CommentsOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryComments().All(ctx)
	}
	return result, err
}

func (w *Work) Images(ctx context.Context) ([]*Image, error) {
	result, err := w.Edges.ImagesOrErr()
	if IsNotLoaded(err) {
		result, err = w.QueryImages().All(ctx)
	}
	return result, err
}
