// Code generated by entc, DO NOT EDIT.

package ent

import (
	"artsign/ent/category"
	"artsign/ent/comment"
	"artsign/ent/predicate"
	"artsign/ent/user"
	"artsign/ent/work"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkUpdate is the builder for updating Work entities.
type WorkUpdate struct {
	config
	hooks    []Hook
	mutation *WorkMutation
}

// Where appends a list predicates to the WorkUpdate builder.
func (wu *WorkUpdate) Where(ps ...predicate.Work) *WorkUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetTitle sets the "title" field.
func (wu *WorkUpdate) SetTitle(s string) *WorkUpdate {
	wu.mutation.SetTitle(s)
	return wu
}

// SetDescription sets the "description" field.
func (wu *WorkUpdate) SetDescription(s string) *WorkUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// SetImageURL sets the "image_url" field.
func (wu *WorkUpdate) SetImageURL(s string) *WorkUpdate {
	wu.mutation.SetImageURL(s)
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WorkUpdate) SetUpdatedAt(t time.Time) *WorkUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wu *WorkUpdate) SetNillableUpdatedAt(t *time.Time) *WorkUpdate {
	if t != nil {
		wu.SetUpdatedAt(*t)
	}
	return wu
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (wu *WorkUpdate) SetCategoryID(id int) *WorkUpdate {
	wu.mutation.SetCategoryID(id)
	return wu
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (wu *WorkUpdate) SetNillableCategoryID(id *int) *WorkUpdate {
	if id != nil {
		wu = wu.SetCategoryID(*id)
	}
	return wu
}

// SetCategory sets the "category" edge to the Category entity.
func (wu *WorkUpdate) SetCategory(c *Category) *WorkUpdate {
	return wu.SetCategoryID(c.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (wu *WorkUpdate) SetOwnerID(id int) *WorkUpdate {
	wu.mutation.SetOwnerID(id)
	return wu
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (wu *WorkUpdate) SetNillableOwnerID(id *int) *WorkUpdate {
	if id != nil {
		wu = wu.SetOwnerID(*id)
	}
	return wu
}

// SetOwner sets the "owner" edge to the User entity.
func (wu *WorkUpdate) SetOwner(u *User) *WorkUpdate {
	return wu.SetOwnerID(u.ID)
}

// AddLikerIDs adds the "likers" edge to the User entity by IDs.
func (wu *WorkUpdate) AddLikerIDs(ids ...int) *WorkUpdate {
	wu.mutation.AddLikerIDs(ids...)
	return wu
}

// AddLikers adds the "likers" edges to the User entity.
func (wu *WorkUpdate) AddLikers(u ...*User) *WorkUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wu.AddLikerIDs(ids...)
}

// AddTreasurerIDs adds the "treasurers" edge to the User entity by IDs.
func (wu *WorkUpdate) AddTreasurerIDs(ids ...int) *WorkUpdate {
	wu.mutation.AddTreasurerIDs(ids...)
	return wu
}

// AddTreasurers adds the "treasurers" edges to the User entity.
func (wu *WorkUpdate) AddTreasurers(u ...*User) *WorkUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wu.AddTreasurerIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (wu *WorkUpdate) AddCommentIDs(ids ...int) *WorkUpdate {
	wu.mutation.AddCommentIDs(ids...)
	return wu
}

// AddComments adds the "comments" edges to the Comment entity.
func (wu *WorkUpdate) AddComments(c ...*Comment) *WorkUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wu.AddCommentIDs(ids...)
}

// Mutation returns the WorkMutation object of the builder.
func (wu *WorkUpdate) Mutation() *WorkMutation {
	return wu.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (wu *WorkUpdate) ClearCategory() *WorkUpdate {
	wu.mutation.ClearCategory()
	return wu
}

// ClearOwner clears the "owner" edge to the User entity.
func (wu *WorkUpdate) ClearOwner() *WorkUpdate {
	wu.mutation.ClearOwner()
	return wu
}

// ClearLikers clears all "likers" edges to the User entity.
func (wu *WorkUpdate) ClearLikers() *WorkUpdate {
	wu.mutation.ClearLikers()
	return wu
}

// RemoveLikerIDs removes the "likers" edge to User entities by IDs.
func (wu *WorkUpdate) RemoveLikerIDs(ids ...int) *WorkUpdate {
	wu.mutation.RemoveLikerIDs(ids...)
	return wu
}

// RemoveLikers removes "likers" edges to User entities.
func (wu *WorkUpdate) RemoveLikers(u ...*User) *WorkUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wu.RemoveLikerIDs(ids...)
}

// ClearTreasurers clears all "treasurers" edges to the User entity.
func (wu *WorkUpdate) ClearTreasurers() *WorkUpdate {
	wu.mutation.ClearTreasurers()
	return wu
}

// RemoveTreasurerIDs removes the "treasurers" edge to User entities by IDs.
func (wu *WorkUpdate) RemoveTreasurerIDs(ids ...int) *WorkUpdate {
	wu.mutation.RemoveTreasurerIDs(ids...)
	return wu
}

// RemoveTreasurers removes "treasurers" edges to User entities.
func (wu *WorkUpdate) RemoveTreasurers(u ...*User) *WorkUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wu.RemoveTreasurerIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (wu *WorkUpdate) ClearComments() *WorkUpdate {
	wu.mutation.ClearComments()
	return wu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (wu *WorkUpdate) RemoveCommentIDs(ids ...int) *WorkUpdate {
	wu.mutation.RemoveCommentIDs(ids...)
	return wu
}

// RemoveComments removes "comments" edges to Comment entities.
func (wu *WorkUpdate) RemoveComments(c ...*Comment) *WorkUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wu.RemoveCommentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(wu.hooks) == 0 {
		if err = wu.check(); err != nil {
			return 0, err
		}
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wu.check(); err != nil {
				return 0, err
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			if wu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorkUpdate) check() error {
	if v, ok := wu.mutation.Title(); ok {
		if err := work.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := wu.mutation.Description(); ok {
		if err := work.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (wu *WorkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   work.Table,
			Columns: work.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: work.FieldID,
			},
		},
	}
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: work.FieldTitle,
		})
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: work.FieldDescription,
		})
	}
	if value, ok := wu.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: work.FieldImageURL,
		})
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: work.FieldUpdatedAt,
		})
	}
	if wu.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   work.CategoryTable,
			Columns: []string{work.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   work.CategoryTable,
			Columns: []string{work.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   work.OwnerTable,
			Columns: []string{work.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   work.OwnerTable,
			Columns: []string{work.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.LikersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   work.LikersTable,
			Columns: work.LikersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedLikersIDs(); len(nodes) > 0 && !wu.mutation.LikersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   work.LikersTable,
			Columns: work.LikersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.LikersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   work.LikersTable,
			Columns: work.LikersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.TreasurersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   work.TreasurersTable,
			Columns: work.TreasurersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedTreasurersIDs(); len(nodes) > 0 && !wu.mutation.TreasurersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   work.TreasurersTable,
			Columns: work.TreasurersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.TreasurersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   work.TreasurersTable,
			Columns: work.TreasurersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   work.CommentsTable,
			Columns: []string{work.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !wu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   work.CommentsTable,
			Columns: []string{work.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   work.CommentsTable,
			Columns: []string{work.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{work.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// WorkUpdateOne is the builder for updating a single Work entity.
type WorkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkMutation
}

// SetTitle sets the "title" field.
func (wuo *WorkUpdateOne) SetTitle(s string) *WorkUpdateOne {
	wuo.mutation.SetTitle(s)
	return wuo
}

// SetDescription sets the "description" field.
func (wuo *WorkUpdateOne) SetDescription(s string) *WorkUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// SetImageURL sets the "image_url" field.
func (wuo *WorkUpdateOne) SetImageURL(s string) *WorkUpdateOne {
	wuo.mutation.SetImageURL(s)
	return wuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WorkUpdateOne) SetUpdatedAt(t time.Time) *WorkUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wuo *WorkUpdateOne) SetNillableUpdatedAt(t *time.Time) *WorkUpdateOne {
	if t != nil {
		wuo.SetUpdatedAt(*t)
	}
	return wuo
}

// SetCategoryID sets the "category" edge to the Category entity by ID.
func (wuo *WorkUpdateOne) SetCategoryID(id int) *WorkUpdateOne {
	wuo.mutation.SetCategoryID(id)
	return wuo
}

// SetNillableCategoryID sets the "category" edge to the Category entity by ID if the given value is not nil.
func (wuo *WorkUpdateOne) SetNillableCategoryID(id *int) *WorkUpdateOne {
	if id != nil {
		wuo = wuo.SetCategoryID(*id)
	}
	return wuo
}

// SetCategory sets the "category" edge to the Category entity.
func (wuo *WorkUpdateOne) SetCategory(c *Category) *WorkUpdateOne {
	return wuo.SetCategoryID(c.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (wuo *WorkUpdateOne) SetOwnerID(id int) *WorkUpdateOne {
	wuo.mutation.SetOwnerID(id)
	return wuo
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (wuo *WorkUpdateOne) SetNillableOwnerID(id *int) *WorkUpdateOne {
	if id != nil {
		wuo = wuo.SetOwnerID(*id)
	}
	return wuo
}

// SetOwner sets the "owner" edge to the User entity.
func (wuo *WorkUpdateOne) SetOwner(u *User) *WorkUpdateOne {
	return wuo.SetOwnerID(u.ID)
}

// AddLikerIDs adds the "likers" edge to the User entity by IDs.
func (wuo *WorkUpdateOne) AddLikerIDs(ids ...int) *WorkUpdateOne {
	wuo.mutation.AddLikerIDs(ids...)
	return wuo
}

// AddLikers adds the "likers" edges to the User entity.
func (wuo *WorkUpdateOne) AddLikers(u ...*User) *WorkUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wuo.AddLikerIDs(ids...)
}

// AddTreasurerIDs adds the "treasurers" edge to the User entity by IDs.
func (wuo *WorkUpdateOne) AddTreasurerIDs(ids ...int) *WorkUpdateOne {
	wuo.mutation.AddTreasurerIDs(ids...)
	return wuo
}

// AddTreasurers adds the "treasurers" edges to the User entity.
func (wuo *WorkUpdateOne) AddTreasurers(u ...*User) *WorkUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wuo.AddTreasurerIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (wuo *WorkUpdateOne) AddCommentIDs(ids ...int) *WorkUpdateOne {
	wuo.mutation.AddCommentIDs(ids...)
	return wuo
}

// AddComments adds the "comments" edges to the Comment entity.
func (wuo *WorkUpdateOne) AddComments(c ...*Comment) *WorkUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wuo.AddCommentIDs(ids...)
}

// Mutation returns the WorkMutation object of the builder.
func (wuo *WorkUpdateOne) Mutation() *WorkMutation {
	return wuo.mutation
}

// ClearCategory clears the "category" edge to the Category entity.
func (wuo *WorkUpdateOne) ClearCategory() *WorkUpdateOne {
	wuo.mutation.ClearCategory()
	return wuo
}

// ClearOwner clears the "owner" edge to the User entity.
func (wuo *WorkUpdateOne) ClearOwner() *WorkUpdateOne {
	wuo.mutation.ClearOwner()
	return wuo
}

// ClearLikers clears all "likers" edges to the User entity.
func (wuo *WorkUpdateOne) ClearLikers() *WorkUpdateOne {
	wuo.mutation.ClearLikers()
	return wuo
}

// RemoveLikerIDs removes the "likers" edge to User entities by IDs.
func (wuo *WorkUpdateOne) RemoveLikerIDs(ids ...int) *WorkUpdateOne {
	wuo.mutation.RemoveLikerIDs(ids...)
	return wuo
}

// RemoveLikers removes "likers" edges to User entities.
func (wuo *WorkUpdateOne) RemoveLikers(u ...*User) *WorkUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wuo.RemoveLikerIDs(ids...)
}

// ClearTreasurers clears all "treasurers" edges to the User entity.
func (wuo *WorkUpdateOne) ClearTreasurers() *WorkUpdateOne {
	wuo.mutation.ClearTreasurers()
	return wuo
}

// RemoveTreasurerIDs removes the "treasurers" edge to User entities by IDs.
func (wuo *WorkUpdateOne) RemoveTreasurerIDs(ids ...int) *WorkUpdateOne {
	wuo.mutation.RemoveTreasurerIDs(ids...)
	return wuo
}

// RemoveTreasurers removes "treasurers" edges to User entities.
func (wuo *WorkUpdateOne) RemoveTreasurers(u ...*User) *WorkUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wuo.RemoveTreasurerIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (wuo *WorkUpdateOne) ClearComments() *WorkUpdateOne {
	wuo.mutation.ClearComments()
	return wuo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (wuo *WorkUpdateOne) RemoveCommentIDs(ids ...int) *WorkUpdateOne {
	wuo.mutation.RemoveCommentIDs(ids...)
	return wuo
}

// RemoveComments removes "comments" edges to Comment entities.
func (wuo *WorkUpdateOne) RemoveComments(c ...*Comment) *WorkUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return wuo.RemoveCommentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkUpdateOne) Select(field string, fields ...string) *WorkUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Work entity.
func (wuo *WorkUpdateOne) Save(ctx context.Context) (*Work, error) {
	var (
		err  error
		node *Work
	)
	if len(wuo.hooks) == 0 {
		if err = wuo.check(); err != nil {
			return nil, err
		}
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WorkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = wuo.check(); err != nil {
				return nil, err
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			if wuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = wuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkUpdateOne) SaveX(ctx context.Context) *Work {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorkUpdateOne) check() error {
	if v, ok := wuo.mutation.Title(); ok {
		if err := work.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := wuo.mutation.Description(); ok {
		if err := work.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	return nil
}

func (wuo *WorkUpdateOne) sqlSave(ctx context.Context) (_node *Work, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   work.Table,
			Columns: work.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: work.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Work.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, work.FieldID)
		for _, f := range fields {
			if !work.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != work.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: work.FieldTitle,
		})
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: work.FieldDescription,
		})
	}
	if value, ok := wuo.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: work.FieldImageURL,
		})
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: work.FieldUpdatedAt,
		})
	}
	if wuo.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   work.CategoryTable,
			Columns: []string{work.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   work.CategoryTable,
			Columns: []string{work.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: category.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   work.OwnerTable,
			Columns: []string{work.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   work.OwnerTable,
			Columns: []string{work.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.LikersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   work.LikersTable,
			Columns: work.LikersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedLikersIDs(); len(nodes) > 0 && !wuo.mutation.LikersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   work.LikersTable,
			Columns: work.LikersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.LikersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   work.LikersTable,
			Columns: work.LikersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.TreasurersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   work.TreasurersTable,
			Columns: work.TreasurersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedTreasurersIDs(); len(nodes) > 0 && !wuo.mutation.TreasurersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   work.TreasurersTable,
			Columns: work.TreasurersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.TreasurersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   work.TreasurersTable,
			Columns: work.TreasurersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   work.CommentsTable,
			Columns: []string{work.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !wuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   work.CommentsTable,
			Columns: []string{work.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   work.CommentsTable,
			Columns: []string{work.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Work{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{work.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
