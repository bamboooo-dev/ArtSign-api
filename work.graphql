# Maps a Time GraphQL scalar to a Go time.Time struct.
scalar Time

interface Node {
  id: ID!
}

# Define an enumeration type and map it later to Ent enum (Go type).
# https://graphql.org/learn/schema/#enumeration-types
enum Status {
  IN_PROGRESS
  COMPLETED
}

# Define an object type and map it later to the generated Ent model.
# https://graphql.org/learn/schema/#object-types-and-fields
type Work implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  title: String!
  description: String!
  image_url: String!
  category: Category!
  owner: User!
  likerConnection(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
  ): UserConnection
  commentConnection(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: CommentOrder
  ): CommentConnection
}

type Category implements Node {
  id: ID!
  name: String!
}

type User implements Node {
  id: ID!
  name: String!
  profile: String
  workConnection(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: WorkOrder
  ): WorkConnection
  likeConnection(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: WorkOrder
  ): WorkConnection
}

type Comment implements Node {
  id: ID!
  content: String!
  createTime: Time!
  updateTime: Time!
}

type UserLike {
  id: ID!
  userID: ID!
  workID: ID!
}

type CreateUserLikePayload {
  clientMutationId: String
}

# Define a mutation for creating works.
# https://graphql.org/learn/queries/#mutations
type Mutation {
  createWork(
    input: CreateWorkInput!
    image: String
    fileExtension: String
  ): Work!
  updateWork(id: ID!, input: UpdateWorkInput!): Work!
  updateWorks(ids: [ID!]!, input: UpdateWorkInput!): [Work!]!
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  createUserLike(input: CreateUserLikeInput!): CreateUserLikePayload
  createComment(input: CreateCommentInput!): Comment!
}

# Define a query for getting all works.
type Query {
  works(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: WorkOrder
    where: WorkWhereInput
  ): WorkConnection
  users(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
    where: UserWhereInput
  ): UserConnection
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
}

scalar Cursor

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type WorkConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [WorkEdge]
}

type CommentConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CommentEdge]
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type WorkEdge {
  node: Work
  cursor: Cursor!
}

type CommentEdge {
  node: Comment
  cursor: Cursor!
}

type UserEdge {
  node: User
  cursor: Cursor!
}

# These enums are matched the entgql annotations in the ent/schema.
enum WorkOrderField {
  CREATED_AT
  UPDATED_AT
  TITLE
  PRIORITY
  STATUS
  TEXT
}

enum CommentOrderField {
  CREATE_TIME
  UPDATE_TIME
}

enum UserOrderField {
  NAME
}

enum OrderDirection {
  ASC
  DESC
}

input WorkOrder {
  direction: OrderDirection!
  field: WorkOrderField
}

input CommentOrder {
  direction: OrderDirection!
  field: CommentOrderField
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField
}

input UpdateWorkInput {
  title: String
  description: String
  categoryID: ID
}

input CreateWorkInput {
  title: String!
  description: String!
  categoryID: ID!
  ownerID: ID!
}

input CreateUserInput {
  name: String!
  profile: String
}

input UpdateUserInput {
  name: String
  profile: String
}

input CreateUserLikeInput {
  clientMutationId: String
  userID: ID!
  workID: ID!
}

input CreateCommentInput {
  content: String!
  ownerID: ID!
  workID: ID!
}
